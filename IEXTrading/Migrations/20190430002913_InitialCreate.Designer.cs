// <auto-generated />
using IEXTrading.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace IEXTrading.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190430002913_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IEXTrading.Models.Company", b =>
                {
                    b.Property<string>("symbol")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("date");

                    b.Property<string>("iexId");

                    b.Property<bool>("isEnabled");

                    b.Property<string>("name");

                    b.Property<string>("type");

                    b.HasKey("symbol");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("IEXTrading.Models.Equity", b =>
                {
                    b.Property<int>("EquityId")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("change");

                    b.Property<float>("changeOverTime");

                    b.Property<float>("changePercent");

                    b.Property<float>("close");

                    b.Property<string>("date");

                    b.Property<float>("high");

                    b.Property<string>("label");

                    b.Property<float>("low");

                    b.Property<float>("open");

                    b.Property<string>("symbol");

                    b.Property<int>("unadjustedVolume");

                    b.Property<int>("volume");

                    b.Property<float>("vwap");

                    b.HasKey("EquityId");

                    b.HasIndex("symbol");

                    b.ToTable("Equities");
                });

            modelBuilder.Entity("IEXTrading.Models.FinancialsData", b =>
                {
                    b.Property<int>("sno")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("cashChange");

                    b.Property<double>("cashFlow");

                    b.Property<double>("costOfRevenue");

                    b.Property<double>("currentAssets");

                    b.Property<double>("currentCash");

                    b.Property<double>("currentDebt");

                    b.Property<double>("grossProfit");

                    b.Property<double>("netIncome");

                    b.Property<double>("operatingExpense");

                    b.Property<string>("operatingGainsLosses");

                    b.Property<double>("operatingIncome");

                    b.Property<double>("operatingRevenue");

                    b.Property<string>("reportDate");

                    b.Property<double>("researchAndDevelopment");

                    b.Property<double>("shareholderEquity");

                    b.Property<string>("symbol");

                    b.Property<double>("totalAssets");

                    b.Property<double>("totalCash");

                    b.Property<double>("totalLiabilities");

                    b.Property<double>("totalRevenue");

                    b.HasKey("sno");

                    b.ToTable("FinancialData");
                });

            modelBuilder.Entity("IEXTrading.Models.Gainers", b =>
                {
                    b.Property<string>("symbol")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("companyName");

                    b.Property<string>("primaryExchange");

                    b.Property<string>("sector");

                    b.HasKey("symbol");

                    b.ToTable("Gainers");
                });

            modelBuilder.Entity("IEXTrading.Models.Losers", b =>
                {
                    b.Property<string>("symbol")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("companyName");

                    b.Property<string>("primaryExchange");

                    b.Property<string>("sector");

                    b.HasKey("symbol");

                    b.ToTable("Losers");
                });

            modelBuilder.Entity("IEXTrading.Models.Quote", b =>
                {
                    b.Property<int>("sno")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("avgTotalVolume");

                    b.Property<string>("calculationPrice");

                    b.Property<double>("change");

                    b.Property<double>("changePercent");

                    b.Property<double>("close");

                    b.Property<double>("closeTime");

                    b.Property<string>("companyName");

                    b.Property<double>("delayedPrice");

                    b.Property<double>("delayedPriceTime");

                    b.Property<double>("extendedChange");

                    b.Property<double>("extendedChangePercent");

                    b.Property<double>("extendedPrice");

                    b.Property<double>("extendedPriceTime");

                    b.Property<double>("high");

                    b.Property<double>("iexAskPrice");

                    b.Property<double>("iexAskSize");

                    b.Property<double>("iexBidPrice");

                    b.Property<double>("iexBidSize");

                    b.Property<double>("iexLastUpdated");

                    b.Property<double>("iexMarketPercent");

                    b.Property<double>("iexRealtimePrice");

                    b.Property<double>("iexRealtimeSize");

                    b.Property<double>("iexVolume");

                    b.Property<double>("latestPrice");

                    b.Property<string>("latestSource");

                    b.Property<string>("latestTime");

                    b.Property<double>("latestUpdate");

                    b.Property<double>("latestVolume");

                    b.Property<double>("low");

                    b.Property<double>("marketCap");

                    b.Property<double>("open");

                    b.Property<double>("openTime");

                    b.Property<double>("peRatio");

                    b.Property<double>("previousClose");

                    b.Property<string>("primaryExchange");

                    b.Property<string>("sector");

                    b.Property<string>("symbol");

                    b.Property<double>("week52High");

                    b.Property<double>("week52Low");

                    b.Property<double>("ytdChange");

                    b.HasKey("sno");

                    b.ToTable("Quotes");
                });

            modelBuilder.Entity("IEXTrading.Models.Equity", b =>
                {
                    b.HasOne("IEXTrading.Models.Company")
                        .WithMany("Equities")
                        .HasForeignKey("symbol");
                });
#pragma warning restore 612, 618
        }
    }
}
